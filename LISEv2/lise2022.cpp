#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <sstream>
#include <algorithm>
#include <iomanip>
#include <stdio.h>      /* printf */
#include <math.h>       /* sqrt */
#include <string>
//#include <filesystem>

using namespace std;
//using std::filesystem::current_path;

int main(int argc, char * argv[])
{
	vector<string> aa; //amino acid name-3 letter
	vector<string> nom; //atom name
	vector<int> rno; //residue serial number
	//std::vector<std::string> chain; //chain name : 1 letter
	vector<float> x; //x coordinates
	vector<float> y; //y coordinates
	vector<float> z; //z coordinates
	vector<float> r; //r radius
	vector<int> at; // atom type
	//std::vector<float> x; //x coordinates

	string pdb_id;
	if (argc == 2) {
		pdb_id = string(argv[1]);
	} else {
		pdb_id = "1a6w";
	}

	const string file_ipro ="./tmp/" + pdb_id + "_ipro.txt";

	ifstream ifs(file_ipro, ios::in);
	int nl = 0; //nof lines
	if (!ifs.is_open()) {
		cout << "Failed to open file.\n";
    return EXIT_FAILURE;
	}
	else {
		string n1;
		string n3;
		int n2;
		float n4;
		float n5;
		float n6;
		float n7;
		int n8;
		while (ifs >> n1 >> n2 >> n3 >> n4 >> n5 >> n6 >> n7 >> n8) {
			//cout << n1 << " " << n2 << " " << n3 << " " << n4 << " " << n5 << " " << n6 << " " << n7 << endl;
			aa.push_back(n1);
			nom.push_back(n3);
			rno.push_back(n2);
			x.push_back(n4);
			y.push_back(n5);
			z.push_back(n6);
			r.push_back(n7);
			at.push_back(n8);
			nl++;
		}
		ifs.close();
	}
	cout << nl << " lines\n";
	vector<float> hx; //x coordinates
	vector<float> hy; //y coordinates
	vector<float> hz; //z coordinates
	//std::vector<float> x; //x coordinates
	const string file_iling = "./tmp/" + pdb_id + "_ilig.txt";
	ifstream ifs1(file_iling, ios::in);
	int nh = 0; //nof lines
	if (!ifs1.is_open()) {
		cout << "Failed to open file.\n";
	}
	else {
		string nh1;
		string nh3;
		int nh2;
		float nh4;
		float nh5;
		float nh6;
		//int n7;
		while (ifs1 >> nh1 >> nh2 >> nh3 >> nh4 >> nh5 >> nh6) {
			//cout << n1 << " " << n2 << " " << n3 << " " << n4 << " " << n5 << " " << n6 << " " << n7 "\n";
			hx.push_back(nh4);
			hy.push_back(nh5);
			hz.push_back(nh6);
			nh++;
		}
		ifs1.close();
	}
	cout << nh << " ligand atoms\n";
	/*
	for (int i = 0; i < aa.size(); i++)
	{
		//*cout << aa[i] << " " << rno[i] << " " << nom[i] << " " << x[i] << " " << y[i] << " " << z[i] << "\n";
	}*/
	/*grid*/
	const float ot = 2.7; //occupied grid threshold
	const float st = 5.5; //sphere threshold
	const float ast = 4;  //score assignment threshold
	const float sat = 0.1; //0.025;//0? //surface area threshould
	const float Eft = 1;
	const float w = 2;
	const float bw2 = 8.25; //two sphere overlap threshold
	int xmx, xmn, ymx, ymn, zmx, zmn, x_range, y_range, z_range;
	//const float boundary = 1.02;
	{
		float max = -1000., min = 1000.;
		for (int i = 0; i < nl; i++)
		{
			if (x[i] > max)
				max = x[i];
			if (x[i] < min)
				min = x[i];
		}
		cout << max << " " << min << "\n";
		xmx = floor(max + ast) + 1;
		xmn = floor(min - ast);
		x_range = xmx - xmn+1;
		max = -1000., min = 1000.;
		for (int i = 0; i < nl; i++)
		{
			if (y[i] > max)
				max = y[i];
			if (y[i] < min)
				min = y[i];
		}
		cout << max << " " << min << "\n";
		ymx = floor(max + ast) + 1;
		ymn = floor(min - ast);
		y_range = ymx - ymn+1;
		max = -1000., min = 1000.;
		for (int i = 0; i < nl; i++)
		{
			if (z[i] > max)
				max = z[i];
			if (z[i] < min)
				min = z[i];
		}
		cout << max << " " << min << "\n";
		zmx = floor(max + ast) + 1;
		zmn = floor(min - ast);
		z_range = zmx - zmn+1;
	}
	cout << xmx << " " << xmn << " " << x_range << " " << ymx << " " << ymn << " " << y_range << " " << zmx << " " << zmn << " " << z_range << " " << "\n";
	vector<vector<vector<bool> > > go(x_range, vector<vector<bool>>(y_range, vector<bool>(z_range, 0))); //grid occupied
	vector<vector<vector<float> > > gs(x_range, vector<vector<float>>(y_range, vector<float>(z_range, 0))); //grid score
	vector<vector<vector<float> > > ss(x_range, vector<vector<float>>(y_range, vector<float>(z_range, 0))); //sphere score
	cout << go[x_range - 1][y_range - 1][z_range - 1] << " " << gs[x_range - 1][y_range - 1][z_range - 1] << "\n";
	float tmp3;
	for (int l = 0; l < nl; l++)//i<0; i++)//
	{
		int xu = floor(x[l] + ot) + 1, xl = floor(x[l] - ot);
		int yu = floor(y[l] + ot) + 1, yl = floor(y[l] - ot);
		int zu = floor(z[l] + ot) + 1, zl = floor(z[l] - ot);
		for (int i = xl; i <= xu; i++)
		{
			for (int j = yl; j <= yu; j++)
			{
				for (int k = zl; k <= zu; k++)
				{
					tmp3 = sqrt(pow(x[l] - (float)i, 2) + pow(y[l] - (float)j, 2) + pow(z[l] - (float)k, 2));
					if (tmp3 > ot) continue;
					go[i - xmn][j - ymn][k - zmn] = 1;
					//printf("dist %d,%d,%d,%d,%7.3f,%7.3f,%7.3f,%5.3f,%d,\n",l,i,j,k,x[l],y[l],z[l],tmp3,gd[i-xmn][j-ymn][k-zmn]);
				}
			}
		}
		//getchar();
	}
	cout << "grid occupied " << endl;
	/*compute distance*/
	vector<vector<int> > dist(nl, vector<int>(nl, 0));
	for (int i = 0; i < nl; i++)
	{
		for (int j = i + 1; j < nl; j++)
		{
			tmp3 = sqrt(pow(x[i] - x[j], 2) + pow(y[i] - y[j], 2) + pow(z[i] - z[j], 2));
			if (tmp3 < 2)
				dist[i][j] = 0;
			else if (tmp3 > 13)
				dist[i][j] = 0;
			else if (tmp3 > 10)
				dist[i][j] = 2;
			else
				dist[i][j] = 1;
		}
	}
	cout << "distance computed " << endl;
	/*assign triangle propensity*/
	float Fb[14][14][14] =
	{ {{   0.932,   0.349,   1.282,   0.603,   1.586,   0.000,   0.916,   1.419,   0.608,   0.723,   0.563,   1.594,   1.002,   0.892},
		{   0.000,   0.271,   0.529,   0.471,   0.812,   0.000,   0.621,   1.051,   0.259,   0.459,   0.353,   0.586,   0.413,   0.467},
		{   0.000,   0.000,   1.916,   0.880,   2.384,   0.000,   1.428,   2.728,   0.958,   1.251,   0.955,   2.490,   1.543,   1.218},
		{   0.000,   0.000,   0.000,   1.528,   2.187,   0.000,   1.020,   1.684,   0.322,   1.302,   0.498,   1.334,   1.073,   1.075},
		{   0.000,   0.000,   0.000,   0.000,   6.576,   0.000,   2.343,   3.847,   0.944,   3.010,   1.161,   3.658,   2.386,   2.682},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   1.119,   2.617,   0.606,   1.313,   0.897,   1.827,   1.061,   1.427},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   6.190,   1.137,   2.167,   1.418,   4.302,   1.233,   1.862},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.675,   0.447,   0.542,   1.243,   0.876,   0.814},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   1.987,   0.590,   1.604,   1.178,   1.978},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.651,   1.034,   0.587,   0.696},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   3.999,   2.234,   1.174},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   2.266,   2.025},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   1.192}},
		{{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.363,   0.417,   0.659,   0.783,   0.000,   0.710,   1.401,   0.226,   0.613,   0.362,   0.410,   0.486,   0.534},
		{   0.000,   0.000,   0.888,   0.742,   1.469,   0.000,   1.079,   2.224,   0.425,   0.950,   0.629,   1.053,   0.885,   0.705},
		{   0.000,   0.000,   0.000,   2.558,   2.633,   0.000,   1.607,   2.595,   0.319,   2.141,   0.566,   1.365,   1.438,   1.357},
		{   0.000,   0.000,   0.000,   0.000,   6.240,   0.000,   2.684,   4.541,   0.590,   3.520,   0.984,   2.745,   2.499,   2.047},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   1.594,   4.228,   0.506,   1.880,   1.009,   1.412,   1.206,   1.405},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   8.153,   0.849,   3.161,   1.542,   3.035,   1.807,   2.153},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.322,   0.358,   0.400,   0.533,   0.434,   0.417},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   3.004,   0.661,   1.487,   1.716,   1.785},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.593,   0.615,   0.440,   0.549},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   1.857,   1.264,   0.789},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   1.968,   1.209},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   1.401}},
		{{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   3.124,   1.568,   4.450,   0.000,   2.524,   5.550,   1.483,   2.678,   1.728,   4.297,   2.856,   1.855},
		{   0.000,   0.000,   0.000,   2.994,   4.874,   0.000,   2.299,   4.108,   0.535,   3.434,   0.912,   2.831,   2.787,   1.716},
		{   0.000,   0.000,   0.000,   0.000,  15.014,   0.000,   5.505,  10.782,   1.565,   7.962,   2.289,   7.704,   6.759,   4.184},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   2.355,   6.179,   1.001,   3.431,   1.732,   3.557,   2.542,   2.288},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,  16.222,   2.240,   7.109,   3.105,   9.060,   3.886,   3.908},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   1.027,   0.865,   0.956,   2.104,   1.359,   1.203},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   5.885,   1.355,   4.022,   4.395,   3.034},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   1.304,   1.949,   1.239,   1.151},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   7.170,   4.332,   2.150},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   5.664,   3.178},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   1.762}},
		{{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,  16.868,  16.513,   0.000,   8.568,  10.433,   0.923,  15.830,   1.894,   9.249,   9.017,   5.255},
		{   0.000,   0.000,   0.000,   0.000,  26.169,   0.000,   9.964,  15.619,   1.290,  16.061,   2.405,  12.107,  15.843,   6.462},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   4.558,   9.402,   0.736,   8.072,   1.752,   4.681,   5.701,   4.130},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,  17.500,   0.997,  11.733,   2.205,   9.443,   7.066,   5.422},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.304,   0.805,   0.422,   0.889,   0.833,   0.693},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,  13.400,   1.601,   7.604,  12.117,   5.790},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.720,   1.316,   1.001,   1.022},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   7.219,   6.847,   2.857},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,  10.727,   5.037},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   3.703}},
		{{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,  61.859,   0.000,  26.223,  44.346,   4.448,  31.679,   7.348,  29.769,  38.143,  16.837},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   8.289,  19.191,   1.651,  13.995,   3.766,  10.795,  11.733,   7.871},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,  47.188,   2.701,  23.044,   4.999,  23.479,  16.962,  11.177},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.879,   2.110,   1.069,   2.775,   1.913,   1.584},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,  19.683,   3.526,  14.841,  23.528,  10.658},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   1.764,   3.266,   2.397,   2.118},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,  16.119,  13.745,   7.292},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,  25.811,   7.414},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,  10.364}},
		{{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000, 381.065, 124.129, 522.937,  48.348, 276.264,  56.792, 200.278, 407.962,  51.274},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,  32.943,  75.099,   8.419,  37.979,  15.650,  46.263,  52.688,  20.514},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000, 305.794,  50.274,  99.607,  47.696, 162.163, 125.579,  28.886},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,  19.375,  10.293,  12.386,  44.459,  12.553,   6.613},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000, 111.360,  15.033,  54.131, 121.574,  40.848},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   7.953,  21.879,  16.723,   7.443},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000, 102.767,  58.737,  26.254},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000, 154.065,  39.860},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,  32.222}},
		{{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   2.400,   9.320,   0.934,   5.456,   2.254,   3.609,   3.738,   3.701},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,  24.593,   1.932,  13.816,   4.388,   9.826,   5.757,   8.079},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.563,   0.948,   0.881,   1.492,   0.904,   1.281},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,  10.618,   2.298,   5.456,   7.771,   5.914},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   1.674,   2.100,   1.355,   1.968},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   6.623,   4.250,   2.956},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   6.784,   3.425},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   3.427}},
		{{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,  70.602,   4.888,  32.820,   9.824,  29.586,  13.316,  15.676},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   1.121,   1.552,   1.428,   3.901,   1.056,   1.483},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,  16.698,   3.447,  13.737,  11.149,   7.048},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   2.472,   3.968,   1.486,   2.011},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,  18.552,   7.961,   6.024},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   8.674,   4.780},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   2.995}},
		{{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   1.109,   0.474,   0.858,   1.459,   1.458,   1.511},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   1.711,   0.608,   1.421,   1.100,   1.137},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.880,   1.150,   0.814,   0.920},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   3.590,   2.201,   1.185},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   2.386,   3.313},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.670}},
		{{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,  17.336,   2.510,  10.181,  18.050,   8.173},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   1.057,   1.576,   1.428,   1.654},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   7.465,   8.098,   5.020},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,  19.859,   5.140},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   9.499}},
		{{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   1.201,   1.291,   0.707,   0.867},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   2.929,   1.497,   1.032},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   1.959,   1.730},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   1.105}},
		{{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,  13.829,   8.286,   3.526},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,  10.756,   4.812},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   2.191}},
		{{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,  16.982,   9.258},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   3.688}},
		{{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000},
		{   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   0.000,   3.428}} };


	/*compute triangle*/
	//int t[3];//int t1, t2, t3, tmp1;
	float ts, cx, cy, cz; //ts: triangle score
	for (int i = 0; i < nl; i++)
	{
		//cout << i << endl;
		for (int j = i + 1; j < nl; j++)
		{
			if (dist[i][j] < 1) continue;
			for (int k = j + 1; k < nl; k++)
			{
				if (dist[i][k] < 1 or dist[j][k] < 1 or dist[i][j] + dist[i][k] + dist[j][k] > 4) continue;
				/*cout << i << ' ' << nom[i] << ' ' << aa[i] << x[i] << ' ' << y[i] << ' ' << z[i] << ' ' << at[i] << endl;
				cout << j << ' ' << nom[j] << ' ' << aa[j] << x[j] << ' ' << y[j] << ' ' << z[j] << ' ' << at[j] << endl;
				cout << k << ' ' << nom[k] << ' ' << aa[k] << x[k] << ' ' << y[k] << ' ' << z[k] << ' ' << at[k] << endl;*/
				/*t1 = at[i];
				t2 = at[j];
				t3 = at[k];
				if (t1 > t2)
				{
					tmp1 = t1;
					t1 = t2;
					t2 = tmp1;
				}
				if (t1 > t3)
				{
					tmp1 = t1;
					t1 = t3;
					t3 = tmp1;
				}
				if (t2 > t3)
				{
					tmp1 = t2;
					t2 = t3;
					t3 = tmp1;
				}*/
				int t[3] = { at[i], at[j], at[k] };
				//int n = sizeof(t) / sizeof(t[0]);
				sort(t, t + 3);
				if (Fb[t[0]][t[1]][t[2]] > Eft)//if (Fb[t1][t2][t3] > Eft)
				{
					ts = Fb[t[0]][t[1]][t[2]];//ts = Fb[t1][t2][t3];
					//cout << ts << endl<<endl;
					cx = (x[i] + x[j] + x[k]) / 3;
					cy = (y[i] + y[j] + y[k]) / 3;
					cz = (z[i] + z[j] + z[k]) / 3;
					int xu = floor(cx + ast) + 1, xl = floor(cx - ast);
					int yu = floor(cy + ast) + 1, yl = floor(cy - ast);
					int zu = floor(cz + ast) + 1, zl = floor(cz - ast);
					if (xu > xmx) xu = xmx;
					if (yu > ymx) yu = ymx;
					if (zu > zmx) zu = zmx;
					for (int a = xl; a <= xu; a++)
					{
						for (int b = yl; b <= yu; b++)
						{
							for (int c = zl; c <= zu; c++)
							{
								//cout << a << ' ' << b << ' ' << c << ' ' << xmn << ' ' << ymn << ' ' << zmn << ';';
								if (go[a - xmn][b - ymn][c - zmn]) continue;
								tmp3 = sqrt(pow(cx - (float)a, 2) + pow(cy - (float)b, 2) + pow(cz - (float)c, 2));
								if (tmp3 > ast) continue;
								gs[a - xmn][b - ymn][c - zmn] += ts;
							}
						}
					}
				}
			}
		}
	}//end triangle
	cout << "triangles computed " << endl;
	/*sphere as binding site*/
	float loc[10][10][10];
	for (int i = 0; i < 10; i++)
	{
		for (int j = 0; j < 10; j++)
		{
			for (int k = 0; k < 10; k++)
			{
				tmp3 = sqrt(pow((float)i, 2) + pow((float)j, 2) + pow((float)k, 2));
				loc[i][j][k] = tmp3;
				//printf("%d,%d,%d,%4.2f\n",i,j,k,tmp3);    
			}
		}
	}
	//int a, b, c;
	float smax = 0;
	for (int i = 0; i < x_range; i++)
	{
		for (int j = 0; j < y_range; j++)
		{
			for (int k = 0; k < z_range; k++)
			{
				if (go[i][j][k]) continue;
				if (gs[i][j][k] > smax) smax = gs[i][j][k];
				//ss[i][j][k] = 0;
				int iu = floor(i + st) + 1, il = floor(i - st);//i:index,iu:i upper
				int ju = floor(j + st) + 1, jl = floor(j - st);
				int ku = floor(k + st) + 1, kl = floor(k - st);
				if (iu > x_range - 1) iu = x_range - 1;
				if (ju > y_range - 1) ju = y_range - 1;
				if (ku > z_range - 1) ku = z_range - 1;
				if (il < 0) il = 0;
				if (jl < 0) jl = 0;
				if (kl < 0) kl = 0;
				for (int a = il; a <= iu; a++)
				{
					for (int b = jl; b <= ju; b++)
					{
						for (int c = kl; c <= ku; c++)
						{
							if (go[a][b][c]) continue;
							if (loc[abs(i - a)][abs(j - b)][abs(k - c)] > st) continue;
							//tmp3 = sqrt(float(pow(i-a,2)+pow(j-b,2)+pow(k-c,2)));
							//if (tmp3 > st) continue;
							ss[i][j][k] += gs[a][b][c];
							//if (i == x_range-1) printf("dist %d,%d,%d,%d,%d,%d,%5.2f,%d,%7.3f,%12.2f,\n",i+xmn,j+ymn,k+zmn,a+xmn,b+ymn,c+zmn,loc[abs(i-a)][abs(j-b)][abs(k-c)],gd[a][b][c],gs[a][b][c],ss[i][j][k]);//tmp3,gd[a-xmn][b-ymn][c-zmn],gs[a-xmn][b-ymn][c-zmn]);
						}
					}
				}
			}
		}
	}
	cout << "sphere scores computed " << endl;
	/*top spheres*/
	const int rank = 10;
	float record[rank];
	int lx[rank], ly[rank], lz[rank];
	bool success[rank];
	const string file_top10 = "./results/" + string(argv[1]) + "_top10.pdb";
	ofstream ofs(file_top10, ios::out);
	for (int l = 0; l < rank; l++)
	{
		record[l] = 0;
		lx[l] = 0;
		ly[l] = 0;
		lz[l] = 0;

		for (int i = 0; i < x_range; i++)
		{
			for (int j = 0; j < y_range; j++)
			{
				for (int k = 0; k < z_range; k++)
				{
					if (go[i][j][k]) continue;
					if (ss[i][j][k] > record[l])
					{
						bool is_2_close = false;
						for (int m = 0; m < l; m++)
						{
							tmp3 = sqrt(pow((float)lx[m] - (float)(i + xmn), 2) + pow((float)ly[m] - (float)(j + ymn), 2) + pow((float)lz[m] - (float)(k + zmn), 2));
							if (tmp3 < bw2)
							{
								is_2_close = true;
								break;
							}
						}
						if (is_2_close) continue;
						record[l] = ss[i][j][k];
						lx[l] = i + xmn;
						ly[l] = j + ymn;
						lz[l] = k + zmn;
						//printf("max:%10.2f, %d, %d, %d,%d,%d,%d, %d,\n",record[l],lx[l],ly[l],lz[l],gd[i][j][k],i,j,k);
					}
				}
			}
		}
		cout << "top sphere identified " << endl;
		/*successful or not*/
		success[l] = false;
		float shortest = 100;
		for (int i = 0; i < nh; i++) //while (!feof(fpin))
		{
			cout << i << ' ' << hx[i] << ' ' << hy[i] << ' ' << hz[i] << endl;
			tmp3 = sqrt(pow(hx[i] - (float)lx[l], 2) + pow(hy[i] - (float)ly[l], 2) + pow(hz[i] - (float)lz[l], 2));
			if (shortest > tmp3) shortest = tmp3;
		}
		if (shortest < ast) success[l] = true;
		cout << "rank " << l << " " << success[l] << " " << shortest << " " << record[l] << " " << lx[l] << " " << ly[l] << " " << lz[l] << " " << go[lx[l] - xmn][ly[l] - ymn][lz[l] - zmn] << " " << gs[lx[l] - xmn][ly[l] - ymn][lz[l] - zmn] << " " << ss[lx[l] - xmn][ly[l] - ymn][lz[l] - zmn] << " " << xmn << " " << ymn << " " << zmn; //here used to be error
		ofs << "HETATM" << setw(5) << l << setw(12) << " MN    MN    " << setw(2) << l << "  " << "  " << setw(4) << lx[l] << ".000" << setw(4) << ly[l] << ".000" << setw(4) << lz[l] << ".000" << setw(6) << "1.00" << setw(3) << (int)success[l] * 100 << ".00" << endl;
	}
	ofs.close();
	const string file_top3 = "./details/" + string(argv[1]) + "_top3.pdb";
	ofstream of1(file_top3, ios::out);
	int noa = 1;
	for (int l = 0; l < 3; l++)
	{
		//cout << l << endl;
		int iu = floor(lx[l] + st) + 1, il = floor(lx[l] - st);//i:index,iu:i upper
		int ju = floor(ly[l] + st) + 1, jl = floor(ly[l] - st);//lx real coordinate lx-xmn translate to virtual space
		int ku = floor(lz[l] + st) + 1, kl = floor(lz[l] - st);
		if (iu > xmx) iu = xmx;
		if (ju > ymx) ju = ymx;
		if (ku > zmx) ku = zmx;
		if (il < xmn) il = xmn;
		if (jl < ymn) jl = ymn;
		if (kl < zmn) kl = zmn;
		//cout << lx[l] << il << " " << iu << " " << st << endl;
		for (int a = il; a <= iu; a++)
		{
			for (int b = jl; b <= ju; b++)
			{
				for (int c = kl; c <= ku; c++)
				{
					cout << a << " " << b << " " << c << " " << go[a - xmn][b - ymn][c - zmn] << " " << gs[a - xmn][b - ymn][c - zmn] << " " << ss[a - xmn][b - ymn][c - zmn]<< endl;
					if (go[a - xmn][b - ymn][c - zmn]) continue;
					if (loc[abs(lx[l] - a)][abs(ly[l] - b)][abs(lz[l] - c)] < st)
					{
						float s = sqrt(gs[a - xmn][b - ymn][c - zmn] / smax * 100.0) * 10.0;
						of1 << "HETATM" << setw(5) << noa << setw(12) << "  C   TYR    " << setw(2) << l << "  " << "  " << setw(4) << a << ".000" << setw(4) << b << ".000" << setw(4) << c << ".000" << setw(6) << "1.00" << setw(6) << setprecision(2) << s << endl;
						noa++;
					}

				}
			}
		}
	}
	of1.close();
}

